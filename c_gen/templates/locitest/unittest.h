:: # Copyright 2013, Big Switch Networks, Inc.
:: #
:: # LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
:: # the following special exception:
:: #
:: # LOXI Exception
:: #
:: # As a special exception to the terms of the EPL, you may distribute libraries
:: # generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
:: # that copyright and licensing notices generated by LoxiGen are not altered or removed
:: # from the LoxiGen Libraries and the notice provided below is (i) included in
:: # the LoxiGen Libraries, if distributed in source code form and (ii) included in any
:: # documentation for the LoxiGen Libraries, if distributed in binary form.
:: #
:: # Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
:: #
:: # You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
:: # a copy of the EPL at:
:: #
:: # http://www.eclipse.org/legal/epl-v10.html
:: #
:: # Unless required by applicable law or agreed to in writing, software
:: # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
:: # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
:: # EPL for the specific language governing permissions and limitations
:: # under the EPL.
::
:: include('_copyright.c')

#ifndef UNITTEST_H
#define UNITTEST_H

#include <stdio.h>

#define TEST_PASS 1
#define TEST_FAIL 0

#define TESTCASE(foo, rv) do {                                          \
        fprintf(stderr, "test %s:", #foo);                              \
        fprintf(stderr, "  %s\n", (rv = test_##foo()) ? "PASS" : "FAIL"); \
    } while (0)

#define TEST_ASSERT(result) if (!(result)) do {                         \
        fprintf(stderr, "\nTEST LOCI_ASSERT FAILURE "                        \
               #result " :: %s:%d\n",__FILE__,__LINE__);                \
        LOCI_ASSERT(0);                                                      \
        return TEST_FAIL;                                               \
    } while (0)

#define TEST_ASSERT_EQUAL(expected, result) \
    TEST_ASSERT(((expected) == (result)))

#define TEST_ASSERT_NOT_EQUAL(expected, result) \
    TEST_ASSERT(((expected) != (result)))

#endif
