// Copyright 2017, Big Switch Networks, Inc.
//
// LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
// the following special exception:
//
// LOXI Exception
//
// As a special exception to the terms of the EPL, you may distribute libraries
// generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
// that copyright and licensing notices generated by LoxiGen are not altered or removed
// from the LoxiGen Libraries and the notice provided below is (i) included in
// the LoxiGen Libraries, if distributed in source code form and (ii) included in any
// documentation for the LoxiGen Libraries, if distributed in binary form.
//
// Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
//
// You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
// a copy of the EPL at:
//
// http://www.eclipse.org/legal/epl-v10.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// EPL for the specific language governing permissions and limitations
// under the EPL.

#version 5
#version 6

struct of_port_desc_prop_bsn_breakout : of_port_desc_prop_bsn {
    uint16_t type == 0xffff;
    uint16_t length;
    uint32_t experimenter == 0x5c16c7;
    uint32_t exp_type == 3;
    uint16_t sub_interface_count;        /* Number of sub interfaces */
    uint16_t sub_interface_speed_gbps;   /* Sub interface speed in Gbps */
};

enum ofp_bsn_speed_capabilities(wire_type=uint64_t, bitmask=True) {
    OFP_BSN_SPEED_CAP_10M = 0x1,
    OFP_BSN_SPEED_CAP_100M = 0x2,
    OFP_BSN_SPEED_CAP_1GB = 0x4,
    OFP_BSN_SPEED_CAP_10GB = 0x8,
    OFP_BSN_SPEED_CAP_25GB = 0x10,
    OFP_BSN_SPEED_CAP_40GB = 0x20,
    OFP_BSN_SPEED_CAP_50GB = 0x40,
    OFP_BSN_SPEED_CAP_100GB = 0x80,
};

struct of_port_desc_prop_bsn_speed_capabilities : of_port_desc_prop_bsn {
    uint16_t type == 0xffff;
    uint16_t length;
    uint32_t experimenter == 0x5c16c7;
    uint32_t exp_type == 4;
    uint64_t current;       /* Current capabilities of port */
    uint64_t available;     /* Capabilities available for controller to choose from
                             * based on what is connected in the port */
    uint64_t supported;     /* All capabilities of port supported by HW platform */
};

enum ofp_bsn_misc_capabilities(wire_type=uint64_t, bitmask=True) {
    OFP_BSN_MISC_CAP_FEC = 0x1,
};

struct of_port_desc_prop_bsn_misc_capabilities : of_port_desc_prop_bsn {
    uint16_t type == 0xffff;
    uint16_t length;
    uint32_t experimenter == 0x5c16c7;
    uint32_t exp_type == 5;
    uint64_t current;       /* Current miscellaneous capabilities of port */
    uint64_t available;     /* Capabilities available for controller to choose from
                             * possibly based on what is plugged in the port.
                             * This will be subset of supported capabilities. */
    uint64_t supported;     /* All miscellaneous capabilities of port
                             * supported by HW */
};

struct of_port_desc_prop_bsn_ethtool : of_port_desc_prop_bsn {
    uint16_t    type == 0xffff;
    uint16_t    length;
    uint32_t    experimenter == 0x5c16c7;
    uint32_t    exp_type == 6;
    of_octets_t data;       /* ethtool -m <if> result */
                            /* intended to be decoded by the requestor */
                            /* available on ethool managed interfaces */
};
