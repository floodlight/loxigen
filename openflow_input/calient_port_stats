// Copyright 2013, Big Switch Networks, Inc.
// Copyright 2015, Open Networking Laboratory
//
// LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
// the following special exception:
//
// LOXI Exception
//
// As a special exception to the terms of the EPL, you may distribute libraries
// generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
// that copyright and licensing notices generated by LoxiGen are not altered or removed
// from the LoxiGen Libraries and the notice provided below is (i) included in
// the LoxiGen Libraries, if distributed in source code form and (ii) included in any
// documentation for the LoxiGen Libraries, if distributed in binary form.
//
// Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
//
// You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
// a copy of the EPL at:
//
// http://www.eclipse.org/legal/epl-v10.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// EPL for the specific language governing permissions and limitations
// under the EPL.
//
// Also derived from the OpenFlow header files which have these copyrights:
// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation

#version 4

struct of_calient_port_stats_request : of_calient_stats_request {
    uint8_t  version;
    uint8_t  type == 18;
    uint16_t length;
    uint32_t xid;
    uint16_t stats_type == 0xffff;
    enum ofp_stats_request_flags flags;
    pad(4);
    uint32_t experimenter == 0x0080F958;
    uint32_t subtype == 3;
    of_port_no_t port_no;
    pad(4);
};


struct of_calient_port_stats_entry {
    uint16_t length;
    pad(2);
    of_port_no_t port_no;
    enum ofp_calient_optical_port_admin_state in_admin_status;        /* Input port admin status */
    enum ofp_calient_optical_port_oper_state in_oper_status;          /* Input port operational status */
    enum ofp_calient_optical_port_oper_capability in_oper_capability; /* Input port operational capability */
    enum ofp_calient_ocs_alarm in_alarm;/* Alarm on Input port */
    of_str6_t inport_power;     /* Input port power */
    pad(2);
    of_str6_t outport_power;    /* Output port power */
    pad(2);
    enum ofp_calient_optical_port_admin_state out_admin_status;       /* Output port Admin status */
    enum ofp_calient_optical_port_oper_state out_oper_status;         /* Output port operational status */
    enum ofp_calient_optical_port_oper_capability out_oper_capability;/* Output port operational capability */
    enum ofp_calient_ocs_alarm out_alarm;/* Alarm on Output port */
    pad(4);
    of_str32_t in_circuit_id;   /* Circuit id associated with the input port */
    of_str32_t out_circuit_id;  /* Circuit id associated with the output port */
};

struct of_calient_port_stats_reply : of_calient_stats_reply {
    uint8_t version;
    uint8_t type == 19;
    uint16_t length;
    uint32_t xid;
    uint16_t stats_type == 0xffff;
    enum ofp_stats_reply_flags flags;
    pad(4);
    uint32_t experimenter == 0x0080F958;
    uint32_t subtype == 3;
    uint16_t data_length;
    pad(6);
    list(of_calient_port_stats_entry_t) entries;
};


